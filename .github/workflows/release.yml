name: Create Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+' # e.g., v1.2.3
      - '*rc*'                  # e.g., v1.0.0-rc1
      - '*alpha*'               # e.g., v1.1.0-alpha
      - '*beta*'                # e.g., v1.1.0-beta

jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    container:
      image: ubuntu:25.04
    steps:
      # Step 1: Install Git FIRST
      - name: Install Git
        run: |
          apt-get update
          apt-get install -y git

      # Step 2: Now checkout can use Git to handle submodules
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: third_party
          key: ${{ runner.os }}-deps-${{ hashFiles('build-deps.sh') }}

      - name: Install build dependencies
        run: |
          # Git is already installed, just need the build tools
          apt-get install -y $(cat tools/requirements-ubuntu-sdl3.txt)
          apt-get install -y clang zip

      # ... (the rest of your steps remain the same)
      - name: Build dependencies from source
        run: |
          chmod +x build-deps.sh
          ./build-deps.sh

      - name: Configure and build with CMake
        run: |
          CC=clang CXX=clang++ cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel

      - name: Package artifact
        run: |
          mkdir -p artifacts
          zip -j artifacts/3sx-linux.zip build/3sx third_party/ffmpeg/build/lib/*.so* third_party/sdl3/build/lib/*.so*

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 3sx-linux
          path: artifacts/3sx-linux.zip


  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            git
            zip
            make
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja
            mingw-w64-x86_64-nasm
            mingw-w64-x86_64-clang
            mingw-w64-x86_64-headers-git

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: third_party
          key: ${{ runner.os }}-deps-${{ hashFiles('build-deps.sh') }}

      - name: Build dependencies from source
        run: |
          chmod +x build-deps.sh
          ./build-deps.sh

      - name: Configure and build with CMake
        run: |
          set -o pipefail
          CC=clang CXX=clang++ cmake -S . -B build \
            -G "Ninja" \
            -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel

      - name: Package artifact
        run: |
          mkdir -p artifacts
          cp /mingw64/bin/libwinpthread-1.dll .
          zip -j artifacts/3sx-windows.zip build/3sx.exe libwinpthread-1.dll third_party/ffmpeg/build/bin/*.dll third_party/sdl3/build/bin/*.dll

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 3sx-windows
          path: artifacts/3sx-windows.zip

  build-macos:
    name: Build (macOS)
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: third_party
          key: ${{ runner.os }}-deps-${{ hashFiles('build-deps.sh') }}

      - name: Install packaging tool
        run: brew install zip
        
      - name: Build dependencies from source
        run: |
          chmod +x build-deps.sh
          sh build-deps.sh

      - name: Configure and build with CMake
        run: |
          set -o pipefail
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build --parallel

      - name: Package artifact
        run: |
          mkdir -p artifacts
          cd build
          zip -r ../artifacts/3sx-macos.zip 3sx.app

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 3sx-macos
          path: artifacts/3sx-macos.zip

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts/

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Release ${{ github.ref_name }}"
          tag_name: ${{ github.ref_name }}
          files: artifacts/*.zip
          body: |
            Automated release for ${{ github.ref_name }}
            
            **Commit:** `${{ github.sha }}`
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}
          token: ${{ secrets.GITHUB_TOKEN }}
