name: Build and Release

on:
  push:
    branches:
      - "main"

jobs:
  build-linux:
    name: Build (Linux)
    runs-on: ubuntu-latest
    container:
      image: ubuntu:25.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y git build-essential make clang cmake ninja-build pkg-config zip autoconf automake libtool

      - name: Build dependencies from source
        run: |
          chmod +x build-deps.sh
          ./build-deps.sh

      - name: Configure and build with CMake
        run: |
          cmake -S . -B build -G "Ninja"
          cmake --build build

      - name: Package artifact
        run: |
          mkdir -p artifacts
          zip -j artifacts/3sx-linux.zip build/3sx

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 3sx-linux
          path: artifacts/3sx-linux.zip

  build-windows:
    name: Build (Windows)
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    steps:
      - name: Setup MSYS2
        uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: MINGW64
          install: >-
            git
            zip
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-cmake
            mingw-w64-x86_64-ninja

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build dependencies from source
        run: |
          chmod +x build-deps.sh
          ./build-deps.sh

      - name: Configure and build with CMake
        run: |
          cmake -S . -B build -G "Ninja"
          cmake --build build

      - name: Package artifact
        run: |
          mkdir -p artifacts
          # Package the main executable and any required DLLs from the build directory
          zip -j artifacts/3sx-windows.zip build/3sx.exe build/*.dll

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 3sx-windows
          path: artifacts/3sx-windows.zip

  build-macos:
    name: Build (macOS)
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install dependencies
        run: brew install cmake ninja pkg-config zip

      - name: Build dependencies from source
        run: |
          chmod +x build-deps.sh
          ./build-deps.sh

      - name: Configure and build with CMake
        run: |
          cmake -S . -B build -G "Ninja"
          cmake --build build

      - name: Package artifact
        run: |
          mkdir -p artifacts
          zip -j artifacts/3sx-macos.zip build/3sx

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 3sx-macos
          path: artifacts/3sx-macos.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows, build-macos]
    permissions:
      contents: write
    steps:
      - name: Generate timestamp
        id: timestamp
        run: echo "timestamp=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: "Build ${{ steps.timestamp.outputs.timestamp }}"
          tag_name: "build-${{ steps.timestamp.outputs.timestamp }}"
          files: artifacts/*.zip
          body: |
            Automated build from main branch
            
            **Commit:** `${{ github.sha }}`
            **Message:** ${{ github.event.head_commit.message }}
            **Author:** ${{ github.event.head_commit.author.name }}
            **Date:** ${{ steps.timestamp.outputs.timestamp }}
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
