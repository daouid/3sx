#ifndef CK_PASS_H
#define CK_PASS_H

#include "structs.h"
#include "types.h"

extern void (*const Passive_jmp_tbl[21])();
extern s32 (*const Passive_AS_tbl[20])();
extern s32 (*const Passive_A_tbl[20])();
extern s32 (*const Passive_BS_tbl[20])();
extern s32 (*const Passive_B_tbl[20])();
extern s32 (*const Passive_CS_tbl[20])();
extern s32 (*const Passive_C_tbl[20])();
extern s32 (*const Passive_DS_tbl[20])();
extern s32 (*const Passive_D_tbl[20])();

extern s8 PASSIVE_X;

s32 Ck_Passive_Term(PLW* wk);
void KEN_vs(PLW* wk);
void HUGO_vs(PLW* wk);
void GILL_vs(PLW* wk);
s32 Check_Special_Technique(PLW* wk, WORK* em, s16 VS_Technique, u8 Kind_of_Tech, u8 SP_Tech_ID, s16 Option,
                            s16 Option2);
s32 Check_Attack_Direction(PLW* wk, WORK* em);
s32 Check_VS_Jump(PLW* wk, PLW* em, s16 Height);
s32 Check_Rolling(PLW* wk, WORK* em);
s32 Check_Personal_Action(PLW* wk, WORK* em);
s32 Check_Specific_Term(PLW* wk, WORK* em, s16 VS_Technique, u8 Status_00, u8 Status_01, u8 Status_02);
s32 Check_Dash(PLW* wk, WORK* em, s16 VS_Technique);
s32 Check_Limited_Attack(PLW* wk, WORK* em, s16 VS_Technique, u8 PL_Status, s8 Status_00, s16 Limit_Number);
s32 Check_Limited_Jump_Attack(PLW* wk, WORK* em, u8 PL_Status, s8 Status_00);
s32 Check_Stand(PLW* wk, WORK* em, s16 VS_Technique);
s32 Setup_Next_Stand_Timer(PLW* wk);
s32 Check_VS_Squat(PLW* wk, WORK* em, s16 VS_Technique, u8 Status_00, u8 Status_01);
s32 Setup_Next_Squat_Timer(PLW* wk);
s32 Check_Thrown(PLW* wk, WORK* em);
s32 Check_Catch(PLW* wk, WORK* em, s16 VS_Technique);
s32 Check_Lie(PLW* wk);
s32 Check_Faint(PLW* wk, PLW* enemy, s16 VS_Technique);
s32 Check_Blow_Off(PLW* wk, WORK* em, s16 VS_Technique);
s32 Check_After_Attack(PLW* wk, WORK* em, s16 VS_Technique);
s32 Check_F_Cross_Chop(PLW* wk, WORK* em, s16 VS_Technique);
s32 VS_GILL_AS(PLW* wk);
s32 VS_ALEX_AS(PLW* wk);
s32 VS_RYU_AS(PLW* wk);
s32 VS_RYU_AS(PLW* wk);
s32 VS_YUN_AS(PLW* wk);
s32 VS_DUDLEY_AS(PLW* wk);
s32 VS_NECRO_AS(PLW* wk);
s32 VS_HUGO_AS(PLW* wk);
s32 VS_IBUKI_AS(PLW* wk);
s32 VS_ELENA_AS(PLW* wk);
s32 VS_ORO_AS(PLW* wk);
s32 VS_KEN_AS(PLW* wk);
s32 VS_SEAN_AS(PLW* wk);
s32 VS_URIEN_AS(PLW* wk);
s32 VS_GOUKI_AS(PLW* wk);
s32 VS_CHUN_LI_AS(PLW* wk);
s32 VS_MAKOTO_AS(PLW* wk);
s32 VS_Q_AS(PLW* wk);
s32 VS_NO12_AS(PLW* wk);
s32 VS_REMY_AS(PLW* wk);
s32 VS_GILL_A(PLW* wk);
s32 VS_ALEX_A(PLW* wk);
s32 VS_RYU_A(PLW* wk);
s32 VS_YUN_A(PLW* wk);
s32 VS_DUDLEY_A(PLW* wk);
s32 VS_NECRO_A(PLW* wk);
s32 VS_HUGO_A(PLW* wk);
s32 VS_IBUKI_A(PLW* wk);
s32 VS_ELENA_A(PLW* wk);
s32 VS_ORO_A(PLW* wk);
s32 VS_KEN_A(PLW* wk);
s32 VS_SEAN_A(PLW* wk);
s32 VS_URIEN_A(PLW* wk);
s32 VS_GOUKI_A(PLW* wk);
s32 VS_CHUN_LI_A(PLW* wk);
s32 VS_MAKOTO_A(PLW* wk);
s32 VS_Q_A(PLW* wk);
s32 VS_NO12_A(PLW* wk);
s32 VS_REMY_A(PLW* wk);
s32 VS_GILL_BS(PLW* wk);
s32 VS_ALEX_BS(PLW* wk);
s32 VS_RYU_BS(PLW* wk);
s32 VS_YUN_BS(PLW* wk);
s32 VS_DUDLEY_BS(PLW* wk);
s32 VS_NECRO_BS(PLW* wk);
s32 VS_HUGO_BS(PLW* wk);
s32 VS_IBUKI_BS(PLW* wk);
s32 VS_ELENA_BS(PLW* wk);
s32 VS_ORO_BS(PLW* wk);
s32 VS_KEN_BS(PLW* wk);
s32 VS_SEAN_BS(PLW* wk);
s32 VS_URIEN_BS(PLW* wk);
s32 VS_GOUKI_BS(PLW* wk);
s32 VS_CHUN_LI_BS(PLW* wk);
s32 VS_MAKOTO_BS(PLW* wk);
s32 VS_Q_BS(PLW* wk);
s32 VS_NO12_BS(PLW* wk);
s32 VS_REMY_BS(PLW* wk);
s32 VS_GILL_B(PLW* wk);
s32 VS_ALEX_B(PLW* wk);
s32 VS_RYU_B(PLW* wk);
s32 VS_YUN_B(PLW* wk);
s32 VS_DUDLEY_B(PLW* wk);
s32 VS_NECRO_B(PLW* wk);
s32 VS_HUGO_B(PLW* wk);
s32 VS_IBUKI_B(PLW* wk);
s32 VS_ELENA_B(PLW* wk);
s32 VS_ORO_B(PLW* wk);
s32 VS_KEN_B(PLW* wk);
s32 VS_SEAN_B(PLW* wk);
s32 VS_URIEN_B(PLW* wk);
s32 VS_GOUKI_B(PLW* wk);
s32 VS_CHUN_LI_B(PLW* wk);
s32 VS_MAKOTO_B(PLW* wk);
s32 VS_Q_B(PLW* wk);
s32 VS_NO12_B(PLW* wk);
s32 VS_REMY_B(PLW* wk);
s32 VS_GILL_CS(PLW* wk);
s32 VS_ALEX_CS(PLW* wk);
s32 VS_RYU_CS(PLW* wk);
s32 VS_YUN_CS(PLW* wk);
s32 VS_DUDLEY_CS(PLW* wk);
s32 VS_NECRO_CS(PLW* wk);
s32 VS_HUGO_CS(PLW* wk);
s32 VS_IBUKI_CS(PLW* wk);
s32 VS_ELENA_CS(PLW* wk);
s32 VS_ORO_CS(PLW* wk);
s32 VS_KEN_CS(PLW* wk);
s32 VS_SEAN_CS(PLW* wk);
s32 VS_URIEN_CS(PLW* wk);
s32 VS_GOUKI_CS(PLW* wk);
s32 VS_CHUN_LI_CS(PLW* wk);
s32 VS_MAKOTO_CS(PLW* wk);
s32 VS_Q_CS(PLW* wk);
s32 VS_NO12_CS(PLW* wk);
s32 VS_REMY_CS(PLW* wk);
s32 VS_GILL_C(PLW* wk);
s32 VS_ALEX_C(PLW* wk);
s32 VS_RYU_C(PLW* wk);
s32 VS_YUN_C(PLW* wk);
s32 VS_DUDLEY_C(PLW* wk);
s32 VS_NECRO_C(PLW* wk);
s32 VS_HUGO_C(PLW* wk);
s32 VS_IBUKI_C(PLW* wk);
s32 VS_ELENA_C(PLW* wk);
s32 VS_ORO_C(PLW* wk);
s32 VS_KEN_C(PLW* wk);
s32 VS_SEAN_C(PLW* wk);
s32 VS_URIEN_C(PLW* wk);
s32 VS_GOUKI_C(PLW* wk);
s32 VS_CHUN_LI_C(PLW* wk);
s32 VS_MAKOTO_C(PLW* wk);
s32 VS_Q_C(PLW* wk);
s32 VS_NO12_C(PLW* wk);
s32 VS_REMY_C(PLW* wk);
s32 VS_GILL_DS(PLW* wk);
s32 VS_ALEX_DS(PLW* wk);
s32 VS_RYU_DS(PLW* wk);
s32 VS_YUN_DS(PLW* wk);
s32 VS_DUDLEY_DS(PLW* wk);
s32 VS_NECRO_DS(PLW* wk);
s32 VS_IBUKI_DS(PLW* wk);
s32 VS_HUGO_DS(PLW* wk);
s32 VS_ELENA_DS(PLW* wk);
s32 VS_ORO_DS(PLW* wk);
s32 VS_KEN_DS(PLW* wk);
s32 VS_SEAN_DS(PLW* wk);
s32 VS_URIEN_DS(PLW* wk);
s32 VS_GOUKI_DS(PLW* wk);
s32 VS_CHUN_LI_DS(PLW* wk);
s32 VS_MAKOTO_DS(PLW* wk);
s32 VS_Q_DS(PLW* wk);
s32 VS_NO12_DS(PLW* wk);
s32 VS_REMY_DS(PLW* wk);
s32 VS_GILL_D(PLW* wk);
s32 VS_ALEX_D(PLW* wk);
s32 VS_RYU_D(PLW* wk);
s32 VS_YUN_D(PLW* wk);
s32 VS_DUDLEY_D(PLW* wk);
s32 VS_NECRO_D(PLW* wk);
s32 VS_HUGO_D(PLW* wk);
s32 VS_IBUKI_D(PLW* wk);
s32 VS_ELENA_D(PLW* wk);
s32 VS_ORO_D(PLW* wk);
s32 VS_KEN_D(PLW* wk);
s32 VS_SEAN_D(PLW* wk);
s32 VS_URIEN_D(PLW* wk);
s32 VS_GOUKI_D(PLW* wk);
s32 VS_CHUN_LI_D(PLW* wk);
s32 VS_MAKOTO_D(PLW* wk);
s32 VS_Q_D(PLW* wk);
s32 VS_NO12_D(PLW* wk);
s32 VS_REMY_D(PLW* wk);

#endif
